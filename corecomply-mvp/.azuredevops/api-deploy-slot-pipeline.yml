trigger:
  branches:
    include:
      - main
  paths:
    include:
      - api/**

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '8.x'

stages:
  - stage: Build
    displayName: 'Build API'
    jobs:
      - job: BuildJob
        displayName: 'Build .NET API'
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET SDK'
            inputs:
              version: $(dotnetSdkVersion)

          - task: DotNetCoreCLI@2
            displayName: 'Restore packages'
            inputs:
              command: 'restore'
              projects: '**/CoreComply.Api.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'Build project'
            inputs:
              command: 'build'
              projects: '**/CoreComply.Api.csproj'
              arguments: '--configuration $(buildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'Publish project'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '**/CoreComply.Api.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true

          - task: PublishPipelineArtifact@1
            displayName: 'Publish artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifact: 'api'

  - stage: DeployToStaging
    displayName: 'Deploy to Staging Slot'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeployJob
        displayName: 'Deploy to Staging Slot'
        environment: 'staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download artifact'
                  inputs:
                    artifact: 'api'
                    path: '$(Pipeline.Workspace)/api'

                - task: AzureWebApp@1
                  displayName: 'Deploy to Staging Slot'
                  inputs:
                    azureSubscription: '$(ARM_SERVICE_CONNECTION)'
                    appType: 'webAppLinux'
                    appName: '$(API_APP_NAME)'
                    deployToSlotOrASE: true
                    resourceGroupName: '$(RESOURCE_GROUP_NAME)'
                    slotName: 'staging'
                    package: '$(Pipeline.Workspace)/api/**/*.zip'
                    runtimeStack: 'DOTNETCORE|8.0'

                - task: AzureAppServiceManage@0
                  displayName: 'Warm up staging slot'
                  inputs:
                    azureSubscription: '$(ARM_SERVICE_CONNECTION)'
                    Action: 'Start Azure App Service'
                    WebAppName: '$(API_APP_NAME)'
                    SpecifySlotOrASE: true
                    ResourceGroupName: '$(RESOURCE_GROUP_NAME)'
                    Slot: 'staging'

  - stage: SwapToProduction
    displayName: 'Swap to Production'
    dependsOn: DeployToStaging
    condition: succeeded()
    jobs:
      - deployment: SwapJob
        displayName: 'Swap Staging to Production'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureAppServiceManage@0
                  displayName: 'Swap staging to production'
                  inputs:
                    azureSubscription: '$(ARM_SERVICE_CONNECTION)'
                    Action: 'Swap Slots'
                    WebAppName: '$(API_APP_NAME)'
                    ResourceGroupName: '$(RESOURCE_GROUP_NAME)'
                    SourceSlot: 'staging'
                    SwapWithProduction: true
