using CoreComply.Api.Data;
using CoreComply.Api.Domain.Entities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace CoreComply.Api.Controllers;

[ApiController]
[Route("api/reports")]
[Authorize]
public class ReportsController : ControllerBase
{
    private readonly AppDbContext _context;

    public ReportsController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Report>>> GetAll()
    {
        var reports = await _context.Reports
            .OrderByDescending(r => r.CreatedAt)
            .ToListAsync();

        return Ok(reports);
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<Report>> Get(int id)
    {
        var report = await _context.Reports.FindAsync(id);
        if (report == null)
            return NotFound();

        return Ok(report);
    }

    [HttpPost("generate")]
    public async Task<ActionResult<Report>> Generate(GenerateReportRequest request)
    {
        var report = new Report
        {
            Name = request.Name,
            Type = request.Type,
            Description = request.Description ?? "",
            Format = request.Format,
            Framework = request.Framework,
            CreatedBy = User.Identity?.Name ?? "System",
            CreatedAt = DateTime.UtcNow,
            Status = "generating",
            Parameters = System.Text.Json.JsonSerializer.Serialize(request.Parameters)
        };

        _context.Reports.Add(report);
        await _context.SaveChangesAsync();

        // In a real implementation, this would trigger background report generation
        // For now, immediately mark as ready
        report.Status = "ready";
        report.LastGenerated = DateTime.UtcNow;
        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(Get), new { id = report.Id }, report);
    }

    [HttpGet("{id}/export")]
    public async Task<ActionResult> Export(int id)
    {
        var report = await _context.Reports.FindAsync(id);
        if (report == null)
            return NotFound();

        // Generate file based on format
        byte[] fileContent;
        string contentType;
        string fileName;

        switch (report.Format.ToLower())
        {
            case "pdf":
                fileContent = GeneratePdfReport(report);
                contentType = "application/pdf";
                fileName = $"{SanitizeFileName(report.Name)}.pdf";
                break;
            case "csv":
                fileContent = GenerateCsvReport(report);
                contentType = "text/csv";
                fileName = $"{SanitizeFileName(report.Name)}.csv";
                break;
            case "xlsx":
                fileContent = GenerateExcelReport(report);
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                fileName = $"{SanitizeFileName(report.Name)}.xlsx";
                break;
            default:
                fileContent = GeneratePdfReport(report);
                contentType = "application/pdf";
                fileName = $"{SanitizeFileName(report.Name)}.pdf";
                break;
        }

        return File(fileContent, contentType, fileName);
    }

    private static byte[] GeneratePdfReport(Report report)
    {
        // Simple PDF generation - in production, use a library like iTextSharp or QuestPDF
        var content = $@"COMPLIANCE REPORT
==================

Report Name: {report.Name}
Type: {report.Type}
Description: {report.Description ?? "N/A"}
Framework: {report.Framework ?? "N/A"}
Generated: {report.LastGenerated?.ToString("yyyy-MM-dd HH:mm") ?? "Not yet generated"}
Created By: {report.CreatedBy}

This is a placeholder PDF report. In production, this would contain detailed compliance data,
charts, tables, and formatted content based on the report type and parameters.

Report Parameters:
{(string.IsNullOrEmpty(report.Parameters) ? "None" : report.Parameters)}

---
Generated by CoreComply Compliance Management System
";
        return System.Text.Encoding.UTF8.GetBytes(content);
    }

    private static byte[] GenerateCsvReport(Report report)
    {
        var csv = $@"Report Name,Type,Description,Framework,Generated,Created By
""{report.Name}"",""{report.Type}"",""{report.Description ?? ""}"",""{report.Framework ?? ""}"",""{report.LastGenerated?.ToString("yyyy-MM-dd HH:mm") ?? ""}"",""{report.CreatedBy}""

This is a placeholder CSV report. In production, this would contain actual compliance data in CSV format.
";
        return System.Text.Encoding.UTF8.GetBytes(csv);
    }

    private static byte[] GenerateExcelReport(Report report)
    {
        // Placeholder for Excel - in production, use EPPlus or similar library
        // For now, return CSV content as fallback
        return GenerateCsvReport(report);
    }

    private static string SanitizeFileName(string fileName)
    {
        var invalid = System.IO.Path.GetInvalidFileNameChars();
        return string.Join("_", fileName.Split(invalid, StringSplitOptions.RemoveEmptyEntries)).TrimEnd('.');
    }

    [HttpGet("templates")]
    public async Task<ActionResult<IEnumerable<ReportTemplate>>> GetTemplates()
    {
        var templates = await _context.ReportTemplates
            .OrderBy(t => t.Category)
            .ThenBy(t => t.Name)
            .ToListAsync();

        return Ok(templates);
    }

    [HttpPut("{id}/schedule")]
    public async Task<IActionResult> Schedule(int id, [FromBody] ScheduleRequest request)
    {
        var report = await _context.Reports.FindAsync(id);
        if (report == null)
            return NotFound();

        report.Schedule = request.CronExpression;
        report.Status = "scheduled";
        await _context.SaveChangesAsync();

        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        var report = await _context.Reports.FindAsync(id);
        if (report == null)
            return NotFound();

        _context.Reports.Remove(report);
        await _context.SaveChangesAsync();

        return NoContent();
    }
}

public class GenerateReportRequest
{
    public string Name { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public string? Description { get; set; }
    public string Format { get; set; } = "pdf";
    public string? Framework { get; set; }
    public object? Parameters { get; set; }
}

public class ScheduleRequest
{
    public string CronExpression { get; set; } = string.Empty;
}
